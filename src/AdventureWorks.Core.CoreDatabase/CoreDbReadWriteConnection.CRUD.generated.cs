//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Dapper;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Runtime.CompilerServices;
using AdventureWorks.Core.Domain.Entities;

namespace AdventureWorks.Core.CoreDatabase
{
    /// <summary>
    /// CRUD Methods using Dapper (using static SQL statements)
    /// </summary>
    partial class CoreDbReadWriteConnection
    {

        #region Address
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AddressId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[Address]
            (
                [AddressLine1],
                [AddressLine2],
                [City],
                [ModifiedDate],
                [PostalCode],
                [StateProvinceID]
            )
            VALUES
            (
                @AddressLine1,
                @AddressLine2,
                @City,
                @ModifiedDate,
                @PostalCode,
                @StateProvinceId
            )";

            e.AddressId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Address e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[Address] SET
                [AddressLine1] = @AddressLine1,
                [AddressLine2] = @AddressLine2,
                [City] = @City,
                [ModifiedDate] = @ModifiedDate,
                [PostalCode] = @PostalCode,
                [StateProvinceID] = @StateProvinceId
            WHERE
                [AddressID] = @AddressId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Address

        #region AddressType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.AddressTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[AddressType]
            (
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @ModifiedDate,
                @Name
            )";

            e.AddressTypeId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(AddressType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[AddressType] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [AddressTypeID] = @AddressTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion AddressType

        #region AWBuildVersion
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SystemInformationId == default(byte))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [AWBuildVersion]
            (
                [Database Version],
                [ModifiedDate],
                [VersionDate]
            )
            VALUES
            (
                @DatabaseVersion,
                @ModifiedDate,
                @VersionDate
            )";

            e.SystemInformationId = this.Query<byte>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(AWBuildVersion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [AWBuildVersion] SET
                [Database Version] = @DatabaseVersion,
                [ModifiedDate] = @ModifiedDate,
                [VersionDate] = @VersionDate
            WHERE
                [SystemInformationID] = @SystemInformationId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion AWBuildVersion

        #region BillOfMaterials
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BillOfMaterialsId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[BillOfMaterials]
            (
                [BOMLevel],
                [ComponentID],
                [EndDate],
                [ModifiedDate],
                [PerAssemblyQty],
                [ProductAssemblyID],
                [StartDate],
                [UnitMeasureCode]
            )
            VALUES
            (
                @BomLevel,
                @ComponentId,
                @EndDate,
                @ModifiedDate,
                @PerAssemblyQty,
                @ProductAssemblyId,
                @StartDate,
                @UnitMeasureCode
            )";

            e.BillOfMaterialsId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(BillOfMaterials e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[BillOfMaterials] SET
                [BOMLevel] = @BomLevel,
                [ComponentID] = @ComponentId,
                [EndDate] = @EndDate,
                [ModifiedDate] = @ModifiedDate,
                [PerAssemblyQty] = @PerAssemblyQty,
                [ProductAssemblyID] = @ProductAssemblyId,
                [StartDate] = @StartDate,
                [UnitMeasureCode] = @UnitMeasureCode
            WHERE
                [BillOfMaterialsID] = @BillOfMaterialsId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion BillOfMaterials

        #region BusinessEntity
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[BusinessEntity]
            (
                [ModifiedDate]
            )
            VALUES
            (
                @ModifiedDate
            )";

            e.BusinessEntityId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(BusinessEntity e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[BusinessEntity] SET
                [ModifiedDate] = @ModifiedDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion BusinessEntity

        #region BusinessEntityAddress
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.AddressId == default(int) && e.AddressTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[BusinessEntityAddress]
            (
                [AddressID],
                [AddressTypeID],
                [BusinessEntityID],
                [ModifiedDate]
            )
            VALUES
            (
                @AddressId,
                @AddressTypeId,
                @BusinessEntityId,
                @ModifiedDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(BusinessEntityAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[BusinessEntityAddress] SET
                [AddressID] = @AddressId,
                [AddressTypeID] = @AddressTypeId,
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [AddressID] = @AddressId AND 
                [AddressTypeID] = @AddressTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion BusinessEntityAddress

        #region BusinessEntityContact
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.PersonId == default(int) && e.ContactTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[BusinessEntityContact]
            (
                [BusinessEntityID],
                [ContactTypeID],
                [ModifiedDate],
                [PersonID]
            )
            VALUES
            (
                @BusinessEntityId,
                @ContactTypeId,
                @ModifiedDate,
                @PersonId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(BusinessEntityContact e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[BusinessEntityContact] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ContactTypeID] = @ContactTypeId,
                [ModifiedDate] = @ModifiedDate,
                [PersonID] = @PersonId
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [PersonID] = @PersonId AND 
                [ContactTypeID] = @ContactTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion BusinessEntityContact

        #region ContactType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ContactTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[ContactType]
            (
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @ModifiedDate,
                @Name
            )";

            e.ContactTypeId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ContactType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[ContactType] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [ContactTypeID] = @ContactTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ContactType

        #region CountryRegion
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CountryRegionCode == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[CountryRegion]
            (
                [CountryRegionCode],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @CountryRegionCode,
                @ModifiedDate,
                @Name
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(CountryRegion e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[CountryRegion] SET
                [CountryRegionCode] = @CountryRegionCode,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [CountryRegionCode] = @CountryRegionCode";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion CountryRegion

        #region CountryRegionCurrency
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CountryRegionCode == null && e.CurrencyCode == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[CountryRegionCurrency]
            (
                [CountryRegionCode],
                [CurrencyCode],
                [ModifiedDate]
            )
            VALUES
            (
                @CountryRegionCode,
                @CurrencyCode,
                @ModifiedDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(CountryRegionCurrency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[CountryRegionCurrency] SET
                [CountryRegionCode] = @CountryRegionCode,
                [CurrencyCode] = @CurrencyCode,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [CountryRegionCode] = @CountryRegionCode AND 
                [CurrencyCode] = @CurrencyCode";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion CountryRegionCurrency

        #region CreditCard
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CreditCardId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[CreditCard]
            (
                [CardNumber],
                [CardType],
                [ExpMonth],
                [ExpYear],
                [ModifiedDate]
            )
            VALUES
            (
                @CardNumber,
                @CardType,
                @ExpMonth,
                @ExpYear,
                @ModifiedDate
            )";

            e.CreditCardId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(CreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[CreditCard] SET
                [CardNumber] = @CardNumber,
                [CardType] = @CardType,
                [ExpMonth] = @ExpMonth,
                [ExpYear] = @ExpYear,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [CreditCardID] = @CreditCardId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion CreditCard

        #region Culture
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CultureId == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[Culture]
            (
                [CultureID],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @CultureId,
                @ModifiedDate,
                @Name
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Culture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[Culture] SET
                [CultureID] = @CultureId,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [CultureID] = @CultureId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Culture

        #region Currency
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CurrencyCode == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[Currency]
            (
                [CurrencyCode],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @CurrencyCode,
                @ModifiedDate,
                @Name
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Currency e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[Currency] SET
                [CurrencyCode] = @CurrencyCode,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [CurrencyCode] = @CurrencyCode";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Currency

        #region CurrencyRate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CurrencyRateId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[CurrencyRate]
            (
                [AverageRate],
                [CurrencyRateDate],
                [EndOfDayRate],
                [FromCurrencyCode],
                [ModifiedDate],
                [ToCurrencyCode]
            )
            VALUES
            (
                @AverageRate,
                @CurrencyRateDate,
                @EndOfDayRate,
                @FromCurrencyCode,
                @ModifiedDate,
                @ToCurrencyCode
            )";

            e.CurrencyRateId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(CurrencyRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[CurrencyRate] SET
                [AverageRate] = @AverageRate,
                [CurrencyRateDate] = @CurrencyRateDate,
                [EndOfDayRate] = @EndOfDayRate,
                [FromCurrencyCode] = @FromCurrencyCode,
                [ModifiedDate] = @ModifiedDate,
                [ToCurrencyCode] = @ToCurrencyCode
            WHERE
                [CurrencyRateID] = @CurrencyRateId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion CurrencyRate

        #region Customer
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.CustomerId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[Customer]
            (
                [ModifiedDate],
                [PersonID],
                [StoreID],
                [TerritoryID]
            )
            VALUES
            (
                @ModifiedDate,
                @PersonId,
                @StoreId,
                @TerritoryId
            )";

            e.CustomerId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Customer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[Customer] SET
                [ModifiedDate] = @ModifiedDate,
                [PersonID] = @PersonId,
                [StoreID] = @StoreId,
                [TerritoryID] = @TerritoryId
            WHERE
                [CustomerID] = @CustomerId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Customer

        #region DatabaseLog
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.DatabaseLogId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [DatabaseLog]
            (
                [DatabaseUser],
                [Event],
                [Object],
                [PostTime],
                [Schema],
                [TSQL],
                [XmlEvent]
            )
            VALUES
            (
                @DatabaseUser,
                @Event,
                @Object,
                @PostTime,
                @Schema,
                @Tsql,
                @XmlEvent
            )";

            e.DatabaseLogId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(DatabaseLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [DatabaseLog] SET
                [DatabaseUser] = @DatabaseUser,
                [Event] = @Event,
                [Object] = @Object,
                [PostTime] = @PostTime,
                [Schema] = @Schema,
                [TSQL] = @Tsql,
                [XmlEvent] = @XmlEvent
            WHERE
                [DatabaseLogID] = @DatabaseLogId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion DatabaseLog

        #region Department
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.DepartmentId == default(short))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[Department]
            (
                [GroupName],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @GroupName,
                @ModifiedDate,
                @Name
            )";

            e.DepartmentId = this.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Department e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[Department] SET
                [GroupName] = @GroupName,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [DepartmentID] = @DepartmentId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Department

        #region EmailAddress
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.EmailAddressId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[EmailAddress]
            (
                [BusinessEntityID],
                [EmailAddress],
                [ModifiedDate]
            )
            VALUES
            (
                @BusinessEntityId,
                @EmailAddress1,
                @ModifiedDate
            )";

            e.EmailAddressId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(EmailAddress e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[EmailAddress] SET
                [BusinessEntityID] = @BusinessEntityId,
                [EmailAddress] = @EmailAddress1,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [EmailAddressID] = @EmailAddressId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion EmailAddress

        #region Employee
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[Employee]
            (
                [BirthDate],
                [BusinessEntityID],
                [CurrentFlag],
                [Gender],
                [HireDate],
                [JobTitle],
                [LoginID],
                [MaritalStatus],
                [ModifiedDate],
                [NationalIDNumber],
                [SalariedFlag],
                [SickLeaveHours],
                [VacationHours]
            )
            VALUES
            (
                @BirthDate,
                @BusinessEntityId,
                @CurrentFlag,
                @Gender,
                @HireDate,
                @JobTitle,
                @LoginId,
                @MaritalStatus,
                @ModifiedDate,
                @NationalIdNumber,
                @SalariedFlag,
                @SickLeaveHours,
                @VacationHours
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Employee e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[Employee] SET
                [BirthDate] = @BirthDate,
                [BusinessEntityID] = @BusinessEntityId,
                [CurrentFlag] = @CurrentFlag,
                [Gender] = @Gender,
                [HireDate] = @HireDate,
                [JobTitle] = @JobTitle,
                [LoginID] = @LoginId,
                [MaritalStatus] = @MaritalStatus,
                [ModifiedDate] = @ModifiedDate,
                [NationalIDNumber] = @NationalIdNumber,
                [SalariedFlag] = @SalariedFlag,
                [SickLeaveHours] = @SickLeaveHours,
                [VacationHours] = @VacationHours
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Employee

        #region EmployeeDepartmentHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.DepartmentId == default(short) && e.ShiftId == default(byte) && e.StartDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[EmployeeDepartmentHistory]
            (
                [BusinessEntityID],
                [DepartmentID],
                [EndDate],
                [ModifiedDate],
                [ShiftID],
                [StartDate]
            )
            VALUES
            (
                @BusinessEntityId,
                @DepartmentId,
                @EndDate,
                @ModifiedDate,
                @ShiftId,
                @StartDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(EmployeeDepartmentHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[EmployeeDepartmentHistory] SET
                [BusinessEntityID] = @BusinessEntityId,
                [DepartmentID] = @DepartmentId,
                [EndDate] = @EndDate,
                [ModifiedDate] = @ModifiedDate,
                [ShiftID] = @ShiftId,
                [StartDate] = @StartDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [DepartmentID] = @DepartmentId AND 
                [ShiftID] = @ShiftId AND 
                [StartDate] = @StartDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion EmployeeDepartmentHistory

        #region EmployeePayHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.RateChangeDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[EmployeePayHistory]
            (
                [BusinessEntityID],
                [ModifiedDate],
                [PayFrequency],
                [Rate],
                [RateChangeDate]
            )
            VALUES
            (
                @BusinessEntityId,
                @ModifiedDate,
                @PayFrequency,
                @Rate,
                @RateChangeDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(EmployeePayHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[EmployeePayHistory] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate,
                [PayFrequency] = @PayFrequency,
                [Rate] = @Rate,
                [RateChangeDate] = @RateChangeDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [RateChangeDate] = @RateChangeDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion EmployeePayHistory

        #region ErrorLog
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ErrorLogId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [ErrorLog]
            (
                [ErrorLine],
                [ErrorMessage],
                [ErrorNumber],
                [ErrorProcedure],
                [ErrorSeverity],
                [ErrorState],
                [ErrorTime],
                [UserName]
            )
            VALUES
            (
                @ErrorLine,
                @ErrorMessage,
                @ErrorNumber,
                @ErrorProcedure,
                @ErrorSeverity,
                @ErrorState,
                @ErrorTime,
                @UserName
            )";

            e.ErrorLogId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ErrorLog e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [ErrorLog] SET
                [ErrorLine] = @ErrorLine,
                [ErrorMessage] = @ErrorMessage,
                [ErrorNumber] = @ErrorNumber,
                [ErrorProcedure] = @ErrorProcedure,
                [ErrorSeverity] = @ErrorSeverity,
                [ErrorState] = @ErrorState,
                [ErrorTime] = @ErrorTime,
                [UserName] = @UserName
            WHERE
                [ErrorLogID] = @ErrorLogId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ErrorLog

        #region Illustration
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.IllustrationId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[Illustration]
            (
                [Diagram],
                [ModifiedDate]
            )
            VALUES
            (
                @Diagram,
                @ModifiedDate
            )";

            e.IllustrationId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Illustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[Illustration] SET
                [Diagram] = @Diagram,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [IllustrationID] = @IllustrationId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Illustration

        #region JobCandidate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.JobCandidateId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[JobCandidate]
            (
                [BusinessEntityID],
                [ModifiedDate],
                [Resume]
            )
            VALUES
            (
                @BusinessEntityId,
                @ModifiedDate,
                @Resume
            )";

            e.JobCandidateId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(JobCandidate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[JobCandidate] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate,
                [Resume] = @Resume
            WHERE
                [JobCandidateID] = @JobCandidateId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion JobCandidate

        #region Location
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.LocationId == default(short))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[Location]
            (
                [Availability],
                [CostRate],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @Availability,
                @CostRate,
                @ModifiedDate,
                @Name
            )";

            e.LocationId = this.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Location e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[Location] SET
                [Availability] = @Availability,
                [CostRate] = @CostRate,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [LocationID] = @LocationId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Location

        #region Password
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[Password]
            (
                [BusinessEntityID],
                [ModifiedDate],
                [PasswordHash],
                [PasswordSalt]
            )
            VALUES
            (
                @BusinessEntityId,
                @ModifiedDate,
                @PasswordHash,
                @PasswordSalt
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Password e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[Password] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate,
                [PasswordHash] = @PasswordHash,
                [PasswordSalt] = @PasswordSalt
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Password

        #region Person
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[Person]
            (
                [AdditionalContactInfo],
                [BusinessEntityID],
                [Demographics],
                [EmailPromotion],
                [FirstName],
                [LastName],
                [MiddleName],
                [ModifiedDate],
                [NameStyle],
                [PersonType],
                [Suffix],
                [Title]
            )
            VALUES
            (
                @AdditionalContactInfo,
                @BusinessEntityId,
                @Demographics,
                @EmailPromotion,
                @FirstName,
                @LastName,
                @MiddleName,
                @ModifiedDate,
                @NameStyle,
                @PersonType,
                @Suffix,
                @Title
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Person e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[Person] SET
                [AdditionalContactInfo] = @AdditionalContactInfo,
                [BusinessEntityID] = @BusinessEntityId,
                [Demographics] = @Demographics,
                [EmailPromotion] = @EmailPromotion,
                [FirstName] = @FirstName,
                [LastName] = @LastName,
                [MiddleName] = @MiddleName,
                [ModifiedDate] = @ModifiedDate,
                [NameStyle] = @NameStyle,
                [PersonType] = @PersonType,
                [Suffix] = @Suffix,
                [Title] = @Title
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Person

        #region PersonCreditCard
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.CreditCardId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[PersonCreditCard]
            (
                [BusinessEntityID],
                [CreditCardID],
                [ModifiedDate]
            )
            VALUES
            (
                @BusinessEntityId,
                @CreditCardId,
                @ModifiedDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(PersonCreditCard e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[PersonCreditCard] SET
                [BusinessEntityID] = @BusinessEntityId,
                [CreditCardID] = @CreditCardId,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [CreditCardID] = @CreditCardId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion PersonCreditCard

        #region PersonPhone
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.PhoneNumber == null && e.PhoneNumberTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[PersonPhone]
            (
                [BusinessEntityID],
                [ModifiedDate],
                [PhoneNumber],
                [PhoneNumberTypeID]
            )
            VALUES
            (
                @BusinessEntityId,
                @ModifiedDate,
                @PhoneNumber,
                @PhoneNumberTypeId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(PersonPhone e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[PersonPhone] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate,
                [PhoneNumber] = @PhoneNumber,
                [PhoneNumberTypeID] = @PhoneNumberTypeId
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [PhoneNumber] = @PhoneNumber AND 
                [PhoneNumberTypeID] = @PhoneNumberTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion PersonPhone

        #region PhoneNumberType
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PhoneNumberTypeId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[PhoneNumberType]
            (
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @ModifiedDate,
                @Name
            )";

            e.PhoneNumberTypeId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(PhoneNumberType e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[PhoneNumberType] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [PhoneNumberTypeID] = @PhoneNumberTypeId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion PhoneNumberType

        #region Product
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[Product]
            (
                [Class],
                [Color],
                [DaysToManufacture],
                [DiscontinuedDate],
                [FinishedGoodsFlag],
                [ListPrice],
                [MakeFlag],
                [ModifiedDate],
                [Name],
                [ProductLine],
                [ProductModelID],
                [ProductNumber],
                [ProductSubcategoryID],
                [ReorderPoint],
                [SafetyStockLevel],
                [SellEndDate],
                [SellStartDate],
                [Size],
                [SizeUnitMeasureCode],
                [StandardCost],
                [Style],
                [Weight],
                [WeightUnitMeasureCode]
            )
            VALUES
            (
                @Class,
                @Color,
                @DaysToManufacture,
                @DiscontinuedDate,
                @FinishedGoodsFlag,
                @ListPrice,
                @MakeFlag,
                @ModifiedDate,
                @Name,
                @ProductLine,
                @ProductModelId,
                @ProductNumber,
                @ProductSubcategoryId,
                @ReorderPoint,
                @SafetyStockLevel,
                @SellEndDate,
                @SellStartDate,
                @Size,
                @SizeUnitMeasureCode,
                @StandardCost,
                @Style,
                @Weight,
                @WeightUnitMeasureCode
            )";

            e.ProductId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Product e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[Product] SET
                [Class] = @Class,
                [Color] = @Color,
                [DaysToManufacture] = @DaysToManufacture,
                [DiscontinuedDate] = @DiscontinuedDate,
                [FinishedGoodsFlag] = @FinishedGoodsFlag,
                [ListPrice] = @ListPrice,
                [MakeFlag] = @MakeFlag,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [ProductLine] = @ProductLine,
                [ProductModelID] = @ProductModelId,
                [ProductNumber] = @ProductNumber,
                [ProductSubcategoryID] = @ProductSubcategoryId,
                [ReorderPoint] = @ReorderPoint,
                [SafetyStockLevel] = @SafetyStockLevel,
                [SellEndDate] = @SellEndDate,
                [SellStartDate] = @SellStartDate,
                [Size] = @Size,
                [SizeUnitMeasureCode] = @SizeUnitMeasureCode,
                [StandardCost] = @StandardCost,
                [Style] = @Style,
                [Weight] = @Weight,
                [WeightUnitMeasureCode] = @WeightUnitMeasureCode
            WHERE
                [ProductID] = @ProductId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Product

        #region ProductCategory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductCategoryId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductCategory]
            (
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @ModifiedDate,
                @Name
            )";

            e.ProductCategoryId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductCategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductCategory] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [ProductCategoryID] = @ProductCategoryId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductCategory

        #region ProductCostHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.StartDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductCostHistory]
            (
                [EndDate],
                [ModifiedDate],
                [ProductID],
                [StandardCost],
                [StartDate]
            )
            VALUES
            (
                @EndDate,
                @ModifiedDate,
                @ProductId,
                @StandardCost,
                @StartDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductCostHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductCostHistory] SET
                [EndDate] = @EndDate,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [StandardCost] = @StandardCost,
                [StartDate] = @StartDate
            WHERE
                [ProductID] = @ProductId AND 
                [StartDate] = @StartDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductCostHistory

        #region ProductDescription
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductDescriptionId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductDescription]
            (
                [Description],
                [ModifiedDate]
            )
            VALUES
            (
                @Description,
                @ModifiedDate
            )";

            e.ProductDescriptionId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductDescription e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductDescription] SET
                [Description] = @Description,
                [ModifiedDate] = @ModifiedDate
            WHERE
                [ProductDescriptionID] = @ProductDescriptionId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductDescription

        #region ProductDocument
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductDocument]
            (
                [ModifiedDate],
                [ProductID]
            )
            VALUES
            (
                @ModifiedDate,
                @ProductId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductDocument e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductDocument] SET
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId
            WHERE
                [ProductID] = @ProductId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductDocument

        #region ProductInventory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.LocationId == default(short))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductInventory]
            (
                [Bin],
                [LocationID],
                [ModifiedDate],
                [ProductID],
                [Quantity],
                [Shelf]
            )
            VALUES
            (
                @Bin,
                @LocationId,
                @ModifiedDate,
                @ProductId,
                @Quantity,
                @Shelf
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductInventory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductInventory] SET
                [Bin] = @Bin,
                [LocationID] = @LocationId,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [Quantity] = @Quantity,
                [Shelf] = @Shelf
            WHERE
                [ProductID] = @ProductId AND 
                [LocationID] = @LocationId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductInventory

        #region ProductListPriceHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.StartDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductListPriceHistory]
            (
                [EndDate],
                [ListPrice],
                [ModifiedDate],
                [ProductID],
                [StartDate]
            )
            VALUES
            (
                @EndDate,
                @ListPrice,
                @ModifiedDate,
                @ProductId,
                @StartDate
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductListPriceHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductListPriceHistory] SET
                [EndDate] = @EndDate,
                [ListPrice] = @ListPrice,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [StartDate] = @StartDate
            WHERE
                [ProductID] = @ProductId AND 
                [StartDate] = @StartDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductListPriceHistory

        #region ProductModel
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductModel]
            (
                [CatalogDescription],
                [Instructions],
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @CatalogDescription,
                @Instructions,
                @ModifiedDate,
                @Name
            )";

            e.ProductModelId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductModel e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductModel] SET
                [CatalogDescription] = @CatalogDescription,
                [Instructions] = @Instructions,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [ProductModelID] = @ProductModelId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductModel

        #region ProductModelIllustration
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int) && e.IllustrationId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductModelIllustration]
            (
                [IllustrationID],
                [ModifiedDate],
                [ProductModelID]
            )
            VALUES
            (
                @IllustrationId,
                @ModifiedDate,
                @ProductModelId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductModelIllustration e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductModelIllustration] SET
                [IllustrationID] = @IllustrationId,
                [ModifiedDate] = @ModifiedDate,
                [ProductModelID] = @ProductModelId
            WHERE
                [ProductModelID] = @ProductModelId AND 
                [IllustrationID] = @IllustrationId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductModelIllustration

        #region ProductModelProductDescriptionCulture
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductModelId == default(int) && e.ProductDescriptionId == default(int) && e.CultureId == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductModelProductDescriptionCulture]
            (
                [CultureID],
                [ModifiedDate],
                [ProductDescriptionID],
                [ProductModelID]
            )
            VALUES
            (
                @CultureId,
                @ModifiedDate,
                @ProductDescriptionId,
                @ProductModelId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductModelProductDescriptionCulture e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductModelProductDescriptionCulture] SET
                [CultureID] = @CultureId,
                [ModifiedDate] = @ModifiedDate,
                [ProductDescriptionID] = @ProductDescriptionId,
                [ProductModelID] = @ProductModelId
            WHERE
                [ProductModelID] = @ProductModelId AND 
                [ProductDescriptionID] = @ProductDescriptionId AND 
                [CultureID] = @CultureId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductModelProductDescriptionCulture

        #region ProductPhoto
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductPhotoId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductPhoto]
            (
                [LargePhoto],
                [LargePhotoFileName],
                [ModifiedDate],
                [ThumbNailPhoto],
                [ThumbnailPhotoFileName]
            )
            VALUES
            (
                @LargePhoto,
                @LargePhotoFileName,
                @ModifiedDate,
                @ThumbNailPhoto,
                @ThumbnailPhotoFileName
            )";

            e.ProductPhotoId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductPhoto] SET
                [LargePhoto] = @LargePhoto,
                [LargePhotoFileName] = @LargePhotoFileName,
                [ModifiedDate] = @ModifiedDate,
                [ThumbNailPhoto] = @ThumbNailPhoto,
                [ThumbnailPhotoFileName] = @ThumbnailPhotoFileName
            WHERE
                [ProductPhotoID] = @ProductPhotoId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductPhoto

        #region ProductProductPhoto
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.ProductPhotoId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductProductPhoto]
            (
                [ModifiedDate],
                [Primary],
                [ProductID],
                [ProductPhotoID]
            )
            VALUES
            (
                @ModifiedDate,
                @Primary,
                @ProductId,
                @ProductPhotoId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductProductPhoto e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductProductPhoto] SET
                [ModifiedDate] = @ModifiedDate,
                [Primary] = @Primary,
                [ProductID] = @ProductId,
                [ProductPhotoID] = @ProductPhotoId
            WHERE
                [ProductID] = @ProductId AND 
                [ProductPhotoID] = @ProductPhotoId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductProductPhoto

        #region ProductReview
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductReviewId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductReview]
            (
                [Comments],
                [EmailAddress],
                [ModifiedDate],
                [ProductID],
                [Rating],
                [ReviewDate],
                [ReviewerName]
            )
            VALUES
            (
                @Comments,
                @EmailAddress,
                @ModifiedDate,
                @ProductId,
                @Rating,
                @ReviewDate,
                @ReviewerName
            )";

            e.ProductReviewId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductReview e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductReview] SET
                [Comments] = @Comments,
                [EmailAddress] = @EmailAddress,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [Rating] = @Rating,
                [ReviewDate] = @ReviewDate,
                [ReviewerName] = @ReviewerName
            WHERE
                [ProductReviewID] = @ProductReviewId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductReview

        #region ProductSubcategory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductSubcategoryId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ProductSubcategory]
            (
                [ModifiedDate],
                [Name],
                [ProductCategoryID]
            )
            VALUES
            (
                @ModifiedDate,
                @Name,
                @ProductCategoryId
            )";

            e.ProductSubcategoryId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductSubcategory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ProductSubcategory] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [ProductCategoryID] = @ProductCategoryId
            WHERE
                [ProductSubcategoryID] = @ProductSubcategoryId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductSubcategory

        #region ProductVendor
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ProductId == default(int) && e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Purchasing].[ProductVendor]
            (
                [AverageLeadTime],
                [BusinessEntityID],
                [LastReceiptCost],
                [LastReceiptDate],
                [MaxOrderQty],
                [MinOrderQty],
                [ModifiedDate],
                [OnOrderQty],
                [ProductID],
                [StandardPrice],
                [UnitMeasureCode]
            )
            VALUES
            (
                @AverageLeadTime,
                @BusinessEntityId,
                @LastReceiptCost,
                @LastReceiptDate,
                @MaxOrderQty,
                @MinOrderQty,
                @ModifiedDate,
                @OnOrderQty,
                @ProductId,
                @StandardPrice,
                @UnitMeasureCode
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ProductVendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Purchasing].[ProductVendor] SET
                [AverageLeadTime] = @AverageLeadTime,
                [BusinessEntityID] = @BusinessEntityId,
                [LastReceiptCost] = @LastReceiptCost,
                [LastReceiptDate] = @LastReceiptDate,
                [MaxOrderQty] = @MaxOrderQty,
                [MinOrderQty] = @MinOrderQty,
                [ModifiedDate] = @ModifiedDate,
                [OnOrderQty] = @OnOrderQty,
                [ProductID] = @ProductId,
                [StandardPrice] = @StandardPrice,
                [UnitMeasureCode] = @UnitMeasureCode
            WHERE
                [ProductID] = @ProductId AND 
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ProductVendor

        #region PurchaseOrderDetail
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PurchaseOrderId == default(int) && e.PurchaseOrderDetailId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Purchasing].[PurchaseOrderDetail]
            (
                [DueDate],
                [ModifiedDate],
                [OrderQty],
                [ProductID],
                [PurchaseOrderID],
                [ReceivedQty],
                [RejectedQty],
                [UnitPrice]
            )
            VALUES
            (
                @DueDate,
                @ModifiedDate,
                @OrderQty,
                @ProductId,
                @PurchaseOrderId,
                @ReceivedQty,
                @RejectedQty,
                @UnitPrice
            )";

            e.PurchaseOrderDetailId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(PurchaseOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Purchasing].[PurchaseOrderDetail] SET
                [DueDate] = @DueDate,
                [ModifiedDate] = @ModifiedDate,
                [OrderQty] = @OrderQty,
                [ProductID] = @ProductId,
                [PurchaseOrderID] = @PurchaseOrderId,
                [ReceivedQty] = @ReceivedQty,
                [RejectedQty] = @RejectedQty,
                [UnitPrice] = @UnitPrice
            WHERE
                [PurchaseOrderID] = @PurchaseOrderId AND 
                [PurchaseOrderDetailID] = @PurchaseOrderDetailId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion PurchaseOrderDetail

        #region PurchaseOrderHeader
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.PurchaseOrderId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Purchasing].[PurchaseOrderHeader]
            (
                [EmployeeID],
                [Freight],
                [ModifiedDate],
                [OrderDate],
                [RevisionNumber],
                [ShipDate],
                [ShipMethodID],
                [Status],
                [SubTotal],
                [TaxAmt],
                [VendorID]
            )
            VALUES
            (
                @EmployeeId,
                @Freight,
                @ModifiedDate,
                @OrderDate,
                @RevisionNumber,
                @ShipDate,
                @ShipMethodId,
                @Status,
                @SubTotal,
                @TaxAmt,
                @VendorId
            )";

            e.PurchaseOrderId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(PurchaseOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Purchasing].[PurchaseOrderHeader] SET
                [EmployeeID] = @EmployeeId,
                [Freight] = @Freight,
                [ModifiedDate] = @ModifiedDate,
                [OrderDate] = @OrderDate,
                [RevisionNumber] = @RevisionNumber,
                [ShipDate] = @ShipDate,
                [ShipMethodID] = @ShipMethodId,
                [Status] = @Status,
                [SubTotal] = @SubTotal,
                [TaxAmt] = @TaxAmt,
                [VendorID] = @VendorId
            WHERE
                [PurchaseOrderID] = @PurchaseOrderId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion PurchaseOrderHeader

        #region SalesOrderDetail
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int) && e.SalesOrderDetailId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesOrderDetail]
            (
                [CarrierTrackingNumber],
                [ModifiedDate],
                [OrderQty],
                [ProductID],
                [SalesOrderID],
                [SpecialOfferID],
                [UnitPrice],
                [UnitPriceDiscount]
            )
            VALUES
            (
                @CarrierTrackingNumber,
                @ModifiedDate,
                @OrderQty,
                @ProductId,
                @SalesOrderId,
                @SpecialOfferId,
                @UnitPrice,
                @UnitPriceDiscount
            )";

            e.SalesOrderDetailId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesOrderDetail e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesOrderDetail] SET
                [CarrierTrackingNumber] = @CarrierTrackingNumber,
                [ModifiedDate] = @ModifiedDate,
                [OrderQty] = @OrderQty,
                [ProductID] = @ProductId,
                [SalesOrderID] = @SalesOrderId,
                [SpecialOfferID] = @SpecialOfferId,
                [UnitPrice] = @UnitPrice,
                [UnitPriceDiscount] = @UnitPriceDiscount
            WHERE
                [SalesOrderID] = @SalesOrderId AND 
                [SalesOrderDetailID] = @SalesOrderDetailId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesOrderDetail

        #region SalesOrderHeader
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesOrderHeader]
            (
                [AccountNumber],
                [BillToAddressID],
                [Comment],
                [CreditCardApprovalCode],
                [CreditCardID],
                [CurrencyRateID],
                [CustomerID],
                [DueDate],
                [Freight],
                [ModifiedDate],
                [OnlineOrderFlag],
                [OrderDate],
                [PurchaseOrderNumber],
                [RevisionNumber],
                [SalesPersonID],
                [ShipDate],
                [ShipMethodID],
                [ShipToAddressID],
                [Status],
                [SubTotal],
                [TaxAmt],
                [TerritoryID]
            )
            VALUES
            (
                @AccountNumber,
                @BillToAddressId,
                @Comment,
                @CreditCardApprovalCode,
                @CreditCardId,
                @CurrencyRateId,
                @CustomerId,
                @DueDate,
                @Freight,
                @ModifiedDate,
                @OnlineOrderFlag,
                @OrderDate,
                @PurchaseOrderNumber,
                @RevisionNumber,
                @SalesPersonId,
                @ShipDate,
                @ShipMethodId,
                @ShipToAddressId,
                @Status,
                @SubTotal,
                @TaxAmt,
                @TerritoryId
            )";

            e.SalesOrderId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesOrderHeader e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesOrderHeader] SET
                [AccountNumber] = @AccountNumber,
                [BillToAddressID] = @BillToAddressId,
                [Comment] = @Comment,
                [CreditCardApprovalCode] = @CreditCardApprovalCode,
                [CreditCardID] = @CreditCardId,
                [CurrencyRateID] = @CurrencyRateId,
                [CustomerID] = @CustomerId,
                [DueDate] = @DueDate,
                [Freight] = @Freight,
                [ModifiedDate] = @ModifiedDate,
                [OnlineOrderFlag] = @OnlineOrderFlag,
                [OrderDate] = @OrderDate,
                [PurchaseOrderNumber] = @PurchaseOrderNumber,
                [RevisionNumber] = @RevisionNumber,
                [SalesPersonID] = @SalesPersonId,
                [ShipDate] = @ShipDate,
                [ShipMethodID] = @ShipMethodId,
                [ShipToAddressID] = @ShipToAddressId,
                [Status] = @Status,
                [SubTotal] = @SubTotal,
                [TaxAmt] = @TaxAmt,
                [TerritoryID] = @TerritoryId
            WHERE
                [SalesOrderID] = @SalesOrderId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesOrderHeader

        #region SalesOrderHeaderSalesReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesOrderId == default(int) && e.SalesReasonId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesOrderHeaderSalesReason]
            (
                [ModifiedDate],
                [SalesOrderID],
                [SalesReasonID]
            )
            VALUES
            (
                @ModifiedDate,
                @SalesOrderId,
                @SalesReasonId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesOrderHeaderSalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesOrderHeaderSalesReason] SET
                [ModifiedDate] = @ModifiedDate,
                [SalesOrderID] = @SalesOrderId,
                [SalesReasonID] = @SalesReasonId
            WHERE
                [SalesOrderID] = @SalesOrderId AND 
                [SalesReasonID] = @SalesReasonId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesOrderHeaderSalesReason

        #region SalesPerson
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesPerson]
            (
                [Bonus],
                [BusinessEntityID],
                [CommissionPct],
                [ModifiedDate],
                [SalesLastYear],
                [SalesQuota],
                [SalesYTD],
                [TerritoryID]
            )
            VALUES
            (
                @Bonus,
                @BusinessEntityId,
                @CommissionPct,
                @ModifiedDate,
                @SalesLastYear,
                @SalesQuota,
                @SalesYtd,
                @TerritoryId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesPerson e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesPerson] SET
                [Bonus] = @Bonus,
                [BusinessEntityID] = @BusinessEntityId,
                [CommissionPct] = @CommissionPct,
                [ModifiedDate] = @ModifiedDate,
                [SalesLastYear] = @SalesLastYear,
                [SalesQuota] = @SalesQuota,
                [SalesYTD] = @SalesYtd,
                [TerritoryID] = @TerritoryId
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesPerson

        #region SalesPersonQuotaHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.QuotaDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesPersonQuotaHistory]
            (
                [BusinessEntityID],
                [ModifiedDate],
                [QuotaDate],
                [SalesQuota]
            )
            VALUES
            (
                @BusinessEntityId,
                @ModifiedDate,
                @QuotaDate,
                @SalesQuota
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesPersonQuotaHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesPersonQuotaHistory] SET
                [BusinessEntityID] = @BusinessEntityId,
                [ModifiedDate] = @ModifiedDate,
                [QuotaDate] = @QuotaDate,
                [SalesQuota] = @SalesQuota
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [QuotaDate] = @QuotaDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesPersonQuotaHistory

        #region SalesReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesReasonId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesReason]
            (
                [ModifiedDate],
                [Name],
                [ReasonType]
            )
            VALUES
            (
                @ModifiedDate,
                @Name,
                @ReasonType
            )";

            e.SalesReasonId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesReason] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [ReasonType] = @ReasonType
            WHERE
                [SalesReasonID] = @SalesReasonId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesReason

        #region SalesTaxRate
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SalesTaxRateId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesTaxRate]
            (
                [ModifiedDate],
                [Name],
                [StateProvinceID],
                [TaxRate],
                [TaxType]
            )
            VALUES
            (
                @ModifiedDate,
                @Name,
                @StateProvinceId,
                @TaxRate,
                @TaxType
            )";

            e.SalesTaxRateId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesTaxRate e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesTaxRate] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [StateProvinceID] = @StateProvinceId,
                [TaxRate] = @TaxRate,
                [TaxType] = @TaxType
            WHERE
                [SalesTaxRateID] = @SalesTaxRateId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesTaxRate

        #region SalesTerritory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TerritoryId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesTerritory]
            (
                [CostLastYear],
                [CostYTD],
                [CountryRegionCode],
                [Group],
                [ModifiedDate],
                [Name],
                [SalesLastYear],
                [SalesYTD]
            )
            VALUES
            (
                @CostLastYear,
                @CostYtd,
                @CountryRegionCode,
                @Group,
                @ModifiedDate,
                @Name,
                @SalesLastYear,
                @SalesYtd
            )";

            e.TerritoryId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesTerritory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesTerritory] SET
                [CostLastYear] = @CostLastYear,
                [CostYTD] = @CostYtd,
                [CountryRegionCode] = @CountryRegionCode,
                [Group] = @Group,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [SalesLastYear] = @SalesLastYear,
                [SalesYTD] = @SalesYtd
            WHERE
                [TerritoryID] = @TerritoryId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesTerritory

        #region SalesTerritoryHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int) && e.TerritoryId == default(int) && e.StartDate == default(DateTime))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SalesTerritoryHistory]
            (
                [BusinessEntityID],
                [EndDate],
                [ModifiedDate],
                [StartDate],
                [TerritoryID]
            )
            VALUES
            (
                @BusinessEntityId,
                @EndDate,
                @ModifiedDate,
                @StartDate,
                @TerritoryId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SalesTerritoryHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SalesTerritoryHistory] SET
                [BusinessEntityID] = @BusinessEntityId,
                [EndDate] = @EndDate,
                [ModifiedDate] = @ModifiedDate,
                [StartDate] = @StartDate,
                [TerritoryID] = @TerritoryId
            WHERE
                [BusinessEntityID] = @BusinessEntityId AND 
                [TerritoryID] = @TerritoryId AND 
                [StartDate] = @StartDate";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SalesTerritoryHistory

        #region ScrapReason
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ScrapReasonId == default(short))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[ScrapReason]
            (
                [ModifiedDate],
                [Name]
            )
            VALUES
            (
                @ModifiedDate,
                @Name
            )";

            e.ScrapReasonId = this.Query<short>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ScrapReason e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[ScrapReason] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name
            WHERE
                [ScrapReasonID] = @ScrapReasonId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ScrapReason

        #region Shift
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShiftId == default(byte))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [HumanResources].[Shift]
            (
                [EndTime],
                [ModifiedDate],
                [Name],
                [StartTime]
            )
            VALUES
            (
                @EndTime,
                @ModifiedDate,
                @Name,
                @StartTime
            )";

            e.ShiftId = this.Query<byte>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Shift e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [HumanResources].[Shift] SET
                [EndTime] = @EndTime,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [StartTime] = @StartTime
            WHERE
                [ShiftID] = @ShiftId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Shift

        #region ShipMethod
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShipMethodId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Purchasing].[ShipMethod]
            (
                [ModifiedDate],
                [Name],
                [ShipBase],
                [ShipRate]
            )
            VALUES
            (
                @ModifiedDate,
                @Name,
                @ShipBase,
                @ShipRate
            )";

            e.ShipMethodId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ShipMethod e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Purchasing].[ShipMethod] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [ShipBase] = @ShipBase,
                [ShipRate] = @ShipRate
            WHERE
                [ShipMethodID] = @ShipMethodId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ShipMethod

        #region ShoppingCartItem
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.ShoppingCartItemId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[ShoppingCartItem]
            (
                [DateCreated],
                [ModifiedDate],
                [ProductID],
                [Quantity],
                [ShoppingCartID]
            )
            VALUES
            (
                @DateCreated,
                @ModifiedDate,
                @ProductId,
                @Quantity,
                @ShoppingCartId
            )";

            e.ShoppingCartItemId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(ShoppingCartItem e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[ShoppingCartItem] SET
                [DateCreated] = @DateCreated,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [Quantity] = @Quantity,
                [ShoppingCartID] = @ShoppingCartId
            WHERE
                [ShoppingCartItemID] = @ShoppingCartItemId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion ShoppingCartItem

        #region SpecialOffer
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SpecialOfferId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SpecialOffer]
            (
                [Category],
                [Description],
                [DiscountPct],
                [EndDate],
                [MaxQty],
                [MinQty],
                [ModifiedDate],
                [StartDate],
                [Type]
            )
            VALUES
            (
                @Category,
                @Description,
                @DiscountPct,
                @EndDate,
                @MaxQty,
                @MinQty,
                @ModifiedDate,
                @StartDate,
                @Type
            )";

            e.SpecialOfferId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SpecialOffer e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SpecialOffer] SET
                [Category] = @Category,
                [Description] = @Description,
                [DiscountPct] = @DiscountPct,
                [EndDate] = @EndDate,
                [MaxQty] = @MaxQty,
                [MinQty] = @MinQty,
                [ModifiedDate] = @ModifiedDate,
                [StartDate] = @StartDate,
                [Type] = @Type
            WHERE
                [SpecialOfferID] = @SpecialOfferId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SpecialOffer

        #region SpecialOfferProduct
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.SpecialOfferId == default(int) && e.ProductId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[SpecialOfferProduct]
            (
                [ModifiedDate],
                [ProductID],
                [SpecialOfferID]
            )
            VALUES
            (
                @ModifiedDate,
                @ProductId,
                @SpecialOfferId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(SpecialOfferProduct e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[SpecialOfferProduct] SET
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [SpecialOfferID] = @SpecialOfferId
            WHERE
                [SpecialOfferID] = @SpecialOfferId AND 
                [ProductID] = @ProductId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion SpecialOfferProduct

        #region StateProvince
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.StateProvinceId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Person].[StateProvince]
            (
                [CountryRegionCode],
                [IsOnlyStateProvinceFlag],
                [ModifiedDate],
                [Name],
                [StateProvinceCode],
                [TerritoryID]
            )
            VALUES
            (
                @CountryRegionCode,
                @IsOnlyStateProvinceFlag,
                @ModifiedDate,
                @Name,
                @StateProvinceCode,
                @TerritoryId
            )";

            e.StateProvinceId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(StateProvince e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Person].[StateProvince] SET
                [CountryRegionCode] = @CountryRegionCode,
                [IsOnlyStateProvinceFlag] = @IsOnlyStateProvinceFlag,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [StateProvinceCode] = @StateProvinceCode,
                [TerritoryID] = @TerritoryId
            WHERE
                [StateProvinceID] = @StateProvinceId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion StateProvince

        #region Store
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Sales].[Store]
            (
                [BusinessEntityID],
                [Demographics],
                [ModifiedDate],
                [Name],
                [SalesPersonID]
            )
            VALUES
            (
                @BusinessEntityId,
                @Demographics,
                @ModifiedDate,
                @Name,
                @SalesPersonId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Store e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Sales].[Store] SET
                [BusinessEntityID] = @BusinessEntityId,
                [Demographics] = @Demographics,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [SalesPersonID] = @SalesPersonId
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Store

        #region TransactionHistory
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TransactionId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[TransactionHistory]
            (
                [ActualCost],
                [ModifiedDate],
                [ProductID],
                [Quantity],
                [ReferenceOrderID],
                [ReferenceOrderLineID],
                [TransactionDate],
                [TransactionType]
            )
            VALUES
            (
                @ActualCost,
                @ModifiedDate,
                @ProductId,
                @Quantity,
                @ReferenceOrderId,
                @ReferenceOrderLineId,
                @TransactionDate,
                @TransactionType
            )";

            e.TransactionId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(TransactionHistory e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[TransactionHistory] SET
                [ActualCost] = @ActualCost,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [Quantity] = @Quantity,
                [ReferenceOrderID] = @ReferenceOrderId,
                [ReferenceOrderLineID] = @ReferenceOrderLineId,
                [TransactionDate] = @TransactionDate,
                [TransactionType] = @TransactionType
            WHERE
                [TransactionID] = @TransactionId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion TransactionHistory

        #region TransactionHistoryArchive
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.TransactionId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[TransactionHistoryArchive]
            (
                [ActualCost],
                [ModifiedDate],
                [ProductID],
                [Quantity],
                [ReferenceOrderID],
                [ReferenceOrderLineID],
                [TransactionDate],
                [TransactionID],
                [TransactionType]
            )
            VALUES
            (
                @ActualCost,
                @ModifiedDate,
                @ProductId,
                @Quantity,
                @ReferenceOrderId,
                @ReferenceOrderLineId,
                @TransactionDate,
                @TransactionId,
                @TransactionType
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(TransactionHistoryArchive e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[TransactionHistoryArchive] SET
                [ActualCost] = @ActualCost,
                [ModifiedDate] = @ModifiedDate,
                [ProductID] = @ProductId,
                [Quantity] = @Quantity,
                [ReferenceOrderID] = @ReferenceOrderId,
                [ReferenceOrderLineID] = @ReferenceOrderLineId,
                [TransactionDate] = @TransactionDate,
                [TransactionID] = @TransactionId,
                [TransactionType] = @TransactionType
            WHERE
                [TransactionID] = @TransactionId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion TransactionHistoryArchive

        #region UnitMeasure
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.UnitMeasureCode == null)
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[UnitMeasure]
            (
                [ModifiedDate],
                [Name],
                [UnitMeasureCode]
            )
            VALUES
            (
                @ModifiedDate,
                @Name,
                @UnitMeasureCode
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(UnitMeasure e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[UnitMeasure] SET
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [UnitMeasureCode] = @UnitMeasureCode
            WHERE
                [UnitMeasureCode] = @UnitMeasureCode";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion UnitMeasure

        #region Vendor
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.BusinessEntityId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Purchasing].[Vendor]
            (
                [AccountNumber],
                [ActiveFlag],
                [BusinessEntityID],
                [CreditRating],
                [ModifiedDate],
                [Name],
                [PreferredVendorStatus],
                [PurchasingWebServiceURL]
            )
            VALUES
            (
                @AccountNumber,
                @ActiveFlag,
                @BusinessEntityId,
                @CreditRating,
                @ModifiedDate,
                @Name,
                @PreferredVendorStatus,
                @PurchasingWebServiceUrl
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(Vendor e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Purchasing].[Vendor] SET
                [AccountNumber] = @AccountNumber,
                [ActiveFlag] = @ActiveFlag,
                [BusinessEntityID] = @BusinessEntityId,
                [CreditRating] = @CreditRating,
                [ModifiedDate] = @ModifiedDate,
                [Name] = @Name,
                [PreferredVendorStatus] = @PreferredVendorStatus,
                [PurchasingWebServiceURL] = @PurchasingWebServiceUrl
            WHERE
                [BusinessEntityID] = @BusinessEntityId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion Vendor

        #region WorkOrder
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.WorkOrderId == default(int))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[WorkOrder]
            (
                [DueDate],
                [EndDate],
                [ModifiedDate],
                [OrderQty],
                [ProductID],
                [ScrappedQty],
                [ScrapReasonID],
                [StartDate]
            )
            VALUES
            (
                @DueDate,
                @EndDate,
                @ModifiedDate,
                @OrderQty,
                @ProductId,
                @ScrappedQty,
                @ScrapReasonId,
                @StartDate
            )";

            e.WorkOrderId = this.Query<int>(cmd + "SELECT SCOPE_IDENTITY();", e, transaction, commandTimeout: commandTimeout).Single();
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(WorkOrder e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[WorkOrder] SET
                [DueDate] = @DueDate,
                [EndDate] = @EndDate,
                [ModifiedDate] = @ModifiedDate,
                [OrderQty] = @OrderQty,
                [ProductID] = @ProductId,
                [ScrappedQty] = @ScrappedQty,
                [ScrapReasonID] = @ScrapReasonId,
                [StartDate] = @StartDate
            WHERE
                [WorkOrderID] = @WorkOrderId";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion WorkOrder

        #region WorkOrderRouting
        /// <summary>
        /// Saves (if new) or Updates (if existing)
        /// </summary>
        public virtual void Save(WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            if (e.WorkOrderId == default(int) && e.ProductId == default(int) && e.OperationSequence == default(short))
                this.Insert(e, transaction, commandTimeout);
            else
                this.Update(e, transaction, commandTimeout);
        }
        /// <summary>
        /// Saves new record
        /// </summary>
        public virtual void Insert(WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            INSERT INTO [Production].[WorkOrderRouting]
            (
                [ActualCost],
                [ActualEndDate],
                [ActualResourceHrs],
                [ActualStartDate],
                [LocationID],
                [ModifiedDate],
                [OperationSequence],
                [PlannedCost],
                [ProductID],
                [ScheduledEndDate],
                [ScheduledStartDate],
                [WorkOrderID]
            )
            VALUES
            (
                @ActualCost,
                @ActualEndDate,
                @ActualResourceHrs,
                @ActualStartDate,
                @LocationId,
                @ModifiedDate,
                @OperationSequence,
                @PlannedCost,
                @ProductId,
                @ScheduledEndDate,
                @ScheduledStartDate,
                @WorkOrderId
            )";

            this.Execute(cmd, e, transaction, commandTimeout);
        }
        /// <summary>
        /// Updates existing record
        /// </summary>
        public virtual void Update(WorkOrderRouting e, IDbTransaction transaction = null, int? commandTimeout = null)
        {
            string cmd = @"
            UPDATE [Production].[WorkOrderRouting] SET
                [ActualCost] = @ActualCost,
                [ActualEndDate] = @ActualEndDate,
                [ActualResourceHrs] = @ActualResourceHrs,
                [ActualStartDate] = @ActualStartDate,
                [LocationID] = @LocationId,
                [ModifiedDate] = @ModifiedDate,
                [OperationSequence] = @OperationSequence,
                [PlannedCost] = @PlannedCost,
                [ProductID] = @ProductId,
                [ScheduledEndDate] = @ScheduledEndDate,
                [ScheduledStartDate] = @ScheduledStartDate,
                [WorkOrderID] = @WorkOrderId
            WHERE
                [WorkOrderID] = @WorkOrderId AND 
                [ProductID] = @ProductId AND 
                [OperationSequence] = @OperationSequence";
            this.Execute(cmd, e, transaction, commandTimeout);
        }
        #endregion WorkOrderRouting
    }
}
